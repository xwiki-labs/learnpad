#!/usr/bin/env bash

### VARIABLES ###

# This is the directory path to your component
declare -r __COMPONENT_PATH__="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# This is the name of your component (must be the last part of ${__COMPONENT_PATH__}
declare -r __COMPONENT_NAME__="$( basename "${__COMPONENT_PATH__}" )"
# This is the path to your `out' directory
declare -r __OUT_PATH__="${__COMPONENT_PATH__}/out"
# These are path for the `start' and `stop' script that must be provided
declare -r __OUT_START_FILE__="${__OUT_PATH__}/start"
declare -r __OUT_STOP_FILE__="${__OUT_PATH__}/stop"
# This is a path to the optional file which list the needed dependencies to run the component
declare -r __OUT_RUNDEPS_FILE__="${__OUT_PATH__}/rundeps.txt"
# This is the path to the directory where you can optionally put some configuration files
declare -r __OUT_CONF_PATH__="${__OUT_PATH__}/etc"

# avoid deleting/re-downloading license files
declare -r __MVN_PROFILE__="-Pkeep-license-files --batch-mode"

### BUILD ###
function component_build() {
    rm -rf $__OUT_PATH__
    monitoring/scripts_build/build
    STATUS=$?
    if [ $STATUS -ne 0 ]; then
        # if failed return error
        exit $STATUS
    else
        simulator/scripts_build/build
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
            exit $STATUS
        fi
    fi
}

### TEST ###
function component_test() {
    monitoring/scripts_build/test
    STATUS=$?
    if [ $STATUS -ne 0 ]; then
        # if failed return error
        exit $STATUS;
    else
        simulator/scripts_build/test;
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
            exit $STATUS
        fi
    fi
}

### INSTALL ###
# This is where you need to publish material into the `out' directory
function component_install() {
    monitoring/scripts_build/install
    STATUS=$?
    if [ $STATUS -ne 0 ]; then
        # if failed return error
        exit $STATUS;
    else
        simulator/scripts_build/install
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
            # if failed return error
            exit $STATUS;
        else
            mkdir -p ${__OUT_PATH__} &&
                cp "scripts/start" "${__OUT_START_FILE__}" &&
                cp "scripts/stop" "${__OUT_STOP_FILE__}" &&
                mkdir -p ${__OUT_PATH__}/simulator &&
                mkdir -p ${__OUT_PATH__}/monitoring &&
                cp -r ${__COMPONENT_PATH__}/simulator/out ${__OUT_PATH__}/simulator/out &&
                cp -r ${__COMPONENT_PATH__}/monitoring/out ${__OUT_PATH__}/monitoring/out

            # check if known deployment is required and setup files
            if [ -n "$1" -a -d "${__COMPONENT_PATH__}/deployment/$1" ]
            then
                cp "${__COMPONENT_PATH__}/deployment/$1/simulator.properties" \
                   "${__OUT_PATH__}/simulator/out/."
                cp "${__COMPONENT_PATH__}/monitoring/deployment/$1/environmentFile" \
                   "${__OUT_PATH__}/monitoring/out/configFiles/."
            fi
        fi;
    fi
}

for i in "$@"
do
    case $i in
        --*)
        CASE=${i#--}
        ;;
    esac
done

component_build && component_test && component_install $CASE
